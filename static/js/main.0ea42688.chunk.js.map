{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","isGoodsListVisible","setIsGoodsListVisible","isReversed","setIsReversed","sortBy","setSortBy","visibleGoods","Name","sort","good1","good2","localeCompare","Length","length","reverse","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,6DAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,iBAAAA,M,KAKL,IA6FeE,EA7FO,WACpB,MAAoDC,oBAAkB,GAAtE,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAoCF,oBAAkB,GAAtD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAAwB,MAApD,mBAAOK,EAAP,KAAeC,EAAf,KAEIC,EAAsB,UAAOT,GAEjC,OAAQO,GACN,KAAKR,EAAOW,KACVD,EAAaE,MACX,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAExC,MAEF,KAAKd,EAAOgB,OACVN,EAAaE,MACX,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAEzC,MAEF,QACEP,EAAY,UAAOT,GAQvB,OAJIK,GACFI,EAAaQ,UAIb,sBAAKC,UAAU,YAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,8BAA+B,aAAc,CAC3C,qBAAsBjB,IAG1BkB,QAAS,kBAAMjB,GAAsB,IAPvC,mBAWCD,GACC,sBAAKe,UAAU,aAAf,UACE,6BACGT,EAAaa,KAAI,SAAAC,GAAI,OACpB,oBAEEL,UAAU,2BAFZ,SAIGK,GAHIA,QAOX,sBAAKL,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMf,GAAeD,IAHhC,qBAQA,wBACEc,KAAK,SACLD,UAAU,+BACVG,QAAS,kBAAMb,EAAUT,EAAOW,OAHlC,iCAQA,wBACES,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMb,EAAUT,EAAOgB,SAHlC,4BAQA,wBACEI,KAAK,SACLD,UAAU,8BACVG,QAAS,kBAAMb,EAAU,OAH3B,6BClGZgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0ea42688.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'name',\n  Length = 'length',\n}\n\nconst App: React.FC = () => {\n  const [isGoodsListVisible, setIsGoodsListVisible] = useState<boolean>(false);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const [sortBy, setSortBy] = useState<SortBy | null>(null);\n\n  let visibleGoods: string[] = [...goodsFromServer];\n\n  switch (sortBy) {\n    case SortBy.Name:\n      visibleGoods.sort(\n        (good1, good2) => good1.localeCompare(good2),\n      );\n      break;\n\n    case SortBy.Length:\n      visibleGoods.sort(\n        (good1, good2) => good1.length - good2.length,\n      );\n      break;\n\n    default:\n      visibleGoods = [...goodsFromServer];\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"App level\">\n      <button\n        type=\"button\"\n        className={classNames(\n          'button is-light is-outlined', 'level-item', {\n            'App__hidden-button': isGoodsListVisible,\n          },\n        )}\n        onClick={() => setIsGoodsListVisible(true)}\n      >\n        Start\n      </button>\n      {isGoodsListVisible && (\n        <div className=\"level-item\">\n          <ul>\n            {visibleGoods.map(good => (\n              <li\n                key={good}\n                className=\"subtitle is-4 level-item\"\n              >\n                {good}\n              </li>\n            ))}\n          </ul>\n          <div className=\"buttons\">\n            <button\n              type=\"button\"\n              className=\"button is-link is-rounded\"\n              onClick={() => setIsReversed(!isReversed)}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-success is-rounded\"\n              onClick={() => setSortBy(SortBy.Name)}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-info is-rounded\"\n              onClick={() => setSortBy(SortBy.Length)}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-danger is-rounded\"\n              onClick={() => setSortBy(null)}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}